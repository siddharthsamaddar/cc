import java.util.HashMap;

/*
A Simple Fraction
Given a fraction. Convert it into a decimal.
If the fractional part is repeating, enclose the repeating part in parentheses.

Example 1:

Input: numerator = 1, denominator = 3
Output: "0.(3)"
Explanation: 1/3 = 0.3333... So here 3 is
recurring.
Example 2:

Input: numerator = 5, denominator = 2
Output: "2.5"
Explanation: 5/2 = 2.5

Expected Time Complexity: O(k) where k is constant.
Expected Space Complexity: O(k)

Constraints:
1 ≤ numerator, denominator ≤ 2000
*/
public class SimpleFraction {
    public static void main(String[] args) {
        int n = 1, d = 12; // d = 9679 (longest repeating)
        System.out.println("A simple fraction " + fractionToDecimal(n, d));
    }

    static String fractionToDecimal(int n, int d) {
        StringBuilder result = new StringBuilder();
        if (n == 0)
            return "0"; // if numerator is zero
        if (d == 0)
            return result.toString(); // if denominator is zero

        if ((n < 0) ^ (d < 0))
            result.append("-"); // check -ve sign

        n = Math.abs(n);
        d = Math.abs(d);
        long quo = n / d;
        long rem = n % d * 10; // calculating remainder keeping the last digit for next division

        result.append(quo);
        if (rem == 0)
            return result.toString(); // return if remainder is 0

        // if remainder is not zero
        result.append(".");

        HashMap<Long, Integer> m = new HashMap<>(); // map for storing remainder
        // and the indices of the appropriate decimal

        while (rem > 0) {
            if (m.containsKey(rem)) {
                // if the remainder is already present, find the index
                int index = m.get(rem);
                String r1 = result.substring(0, index);
                String r2 = "(" + result.substring(index) + ")";
                return r1 + r2;
            }
            // continue updating the map and adding quo to result
            // which was generated by dividing rem with den
            m.put(rem, result.length());
            quo = rem / d;
            result.append(quo);

            // update remainder
            rem = rem % d * 10;

        }
        return result.toString();
    }
}
